/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.hotelmanager.gui;

import cz.muni.fi.pv168.hotelmanager.backend.Room;
import cz.muni.fi.pv168.hotelmanager.backend.RoomManager;
import cz.muni.fi.pv168.hotelmanager.backend.RoomManagerImpl;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.sql.DataSource;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author xlysonek
 */
public class ChooseRoomPanel extends javax.swing.JPanel {

    /**
     * Creates new form ChooseRoomPanel
     */
    public ChooseRoomPanel(DataSource source) {
        initComponents();
        this.source = source;
        loadRooms();
    }

    public void update() {
        loadRooms();
    }
    private void loadRooms() {
        class LoadRoomsWorker extends SwingWorker<List<Room>,Void> {
            @Override
            public List<Room> doInBackground() {
                RoomManager m = new RoomManagerImpl(source);
                return m.getAllRooms();
            }

            @Override
            public void done() {
                try {
                    List<Room> l = get();
                    loadRooms(l);

                }
                catch (ExecutionException e) {

                }
                catch (InterruptedException e) {
                    // can't happen
                }
            }
        }
        LoadRoomsWorker worker = new LoadRoomsWorker();
        worker.execute();
    }

    private void loadRooms(List<Room> list) {
        RoomsTableModel model = (RoomsTableModel) tblRooms.getModel();
        model.deleteAll();
        for (Room r : list) {
            model.addRoom(r);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkServiceOnly = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        spinnerMaxPrice = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        spinnerRoomNumber = new javax.swing.JSpinner();
        spinnerCapacity = new javax.swing.JSpinner();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        spinnerDateSince = new javax.swing.JSpinner();
        spinnerDateUntil = new javax.swing.JSpinner();
        checkFree = new javax.swing.JCheckBox();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cz/muni/fi/pv168/hotelmanager/gui/Bundle"); // NOI18N
        checkServiceOnly.setText(bundle.getString("ChooseRoomPanel.checkServiceOnly.text")); // NOI18N

        jLabel4.setText(bundle.getString("ChooseRoomPanel.jLabel4.text")); // NOI18N

        spinnerMaxPrice.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));

        jLabel2.setText(bundle.getString("ChooseRoomPanel.jLabel2.text")); // NOI18N

        spinnerRoomNumber.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));

        spinnerCapacity.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        btnSearch.setText(bundle.getString("ChooseRoomPanel.btnSearch.text")); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblRooms.setModel(new RoomsTableModel());
        tblRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRooms.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblRooms);

        jLabel1.setText(bundle.getString("ChooseRoomPanel.jLabel1.text")); // NOI18N

        spinnerDateSince.setModel(new javax.swing.SpinnerDateModel());
        spinnerDateSince.setEditor(new javax.swing.JSpinner.DateEditor(spinnerDateSince, "yyyy-MM-dd"));

        spinnerDateUntil.setModel(new javax.swing.SpinnerDateModel());
        spinnerDateUntil.setEditor(new javax.swing.JSpinner.DateEditor(spinnerDateUntil, "yyyy-MM-dd"));

        checkFree.setText(bundle.getString("ChooseRoomPanel.checkFree.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(checkServiceOnly)
                    .addComponent(jLabel2)
                    .addComponent(btnSearch)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spinnerDateSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spinnerCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMaxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkFree, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkServiceOnly)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkFree)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerDateSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerMaxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        Long number = (Long) spinnerRoomNumber.getValue();
        int minCapacity = (Integer) spinnerCapacity.getValue();
        boolean serviceOnly = checkServiceOnly.isSelected();
        boolean freeOnly = checkFree.isSelected();
        LocalDate since = getSince(), until = getUntil();
        BigDecimal maxPrice = BigDecimal.valueOf((Long) spinnerMaxPrice.getValue());

        class RoomSearchSwingWorker extends SwingWorker<List<Room>,Void> {
            @Override
            protected List<Room> doInBackground() throws Exception {
                RoomManager manager = new RoomManagerImpl(source);
                List<Room> res;
                if (!number.equals(Long.valueOf(0l))){
                    res = manager.getRoomByNumber(number);
                }
                else if (freeOnly) {
                    if (serviceOnly){
                        res = manager.getFreeRoomByAttributesWService(minCapacity,
                                maxPrice, since, until);
                    }
                    else {
                        res = manager.getFreeRoomByAttributes(minCapacity,
                                maxPrice, since, until);
                    }
                }
                else {
                    if (serviceOnly){
                        res = manager.getRoomByAttributesWService(minCapacity, maxPrice);
                    }
                    else {
                        res = manager.getRoomByAttributes(minCapacity, maxPrice);
                    }
                }
                return res;
            }

            @Override
            protected void done() {
                try {
                    loadRooms(get());
                }
                catch (ExecutionException ee) {
                    JOptionPane.showMessageDialog(null, "Execution of room search thread has failed " + ee);
                    System.exit(1);
                }
                catch (InterruptedException ie) {
                    // can't happen
                }
            }
        }
        RoomSearchSwingWorker worker = new RoomSearchSwingWorker();
        worker.execute();
    }//GEN-LAST:event_btnSearchActionPerformed

    private LocalDate getSince() {
        Date date = (Date) spinnerDateSince.getValue();
        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    private LocalDate getUntil() {
        Date date = (Date) spinnerDateUntil.getValue();
        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }
    public Room getRoom() {
        int row = tblRooms.getSelectedRow();
        if (row < 0) {
            return null;
        }
        else {
            RoomsTableModel model = (RoomsTableModel) tblRooms.getModel();
            return model.getRow(row);
        }
    }

    private DataSource source;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox checkFree;
    private javax.swing.JCheckBox checkServiceOnly;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinnerCapacity;
    private javax.swing.JSpinner spinnerDateSince;
    private javax.swing.JSpinner spinnerDateUntil;
    private javax.swing.JSpinner spinnerMaxPrice;
    private javax.swing.JSpinner spinnerRoomNumber;
    private javax.swing.JTable tblRooms;
    // End of variables declaration//GEN-END:variables
}
