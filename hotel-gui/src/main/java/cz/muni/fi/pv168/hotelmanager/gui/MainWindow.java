/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.hotelmanager.gui;


import cz.muni.fi.pv168.hotelmanager.backend.DatabaseCommons;
import cz.muni.fi.pv168.hotelmanager.backend.Guest;
import cz.muni.fi.pv168.hotelmanager.backend.GuestManager;
import cz.muni.fi.pv168.hotelmanager.backend.GuestManagerImpl;
import cz.muni.fi.pv168.hotelmanager.backend.Rent;
import cz.muni.fi.pv168.hotelmanager.backend.RentManager;
import cz.muni.fi.pv168.hotelmanager.backend.RentManagerImpl;
import java.time.LocalDate;
import cz.muni.fi.pv168.hotelmanager.backend.Room;
import cz.muni.fi.pv168.hotelmanager.backend.RoomManager;
import cz.muni.fi.pv168.hotelmanager.backend.RoomManagerImpl;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.time.ZoneId;
import java.util.Currency;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.sql.DataSource;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Matlafous
 */
public class MainWindow extends javax.swing.JFrame {

    private final static Logger logger = Logger.getLogger(MainWindow.class.getName());

    /**
     * Creates new form MainWindow
     */
    public MainWindow(DataSource source) {
        this.source = source;
        this.rentEditorPanel = new RentEditorPanel(source);
        this.chooseGuestPanel = new ChooseGuestPanel(source);
        this.chooseRoomPanel = new ChooseRoomPanel(source);
        initComponents();
        loadGuests();
        loadRooms();
        loadRents();
    }

    private void loadGuests() {
        GuestManager m = new GuestManagerImpl(source);
        List<Guest> l = m.getAllGuests();
        loadGuests(l);
        logger.log(Level.INFO, "All guests loaded");
    }

    private void loadGuests(List<Guest> list) {
        GuestsTableModel model = (GuestsTableModel) tblGuests.getModel();
        model.deleteAll();
        for (Guest g : list) {
            model.addGuest(g);
        }
        logger.log(Level.INFO, "Specific guests loaded");
    }

    private void loadRents() {
        RentManager m = new RentManagerImpl(source);
        List<Rent> l = m.getAllRents();
        loadRents(l);
        logger.log(Level.INFO, "All rents loaded");
    }

    private void loadRents(List<Rent> list) {
        RentsTableModel model = (RentsTableModel) tblRents.getModel();
        model.deleteAll();
        for (Rent r : list) {
            model.addRent(r);
        }
        logger.log(Level.INFO, "Specific rents loaded");
    }

    private void loadRooms(){
        RoomManager manager = new RoomManagerImpl(source);
        List<Room> roomsList = manager.getAllRooms();
        loadRooms(roomsList);
        logger.log(Level.INFO, "All rooms loaded");
    }

    private void loadRooms(List<Room> list){
        RoomsTableModel table = (RoomsTableModel) tblRooms.getModel();
        table.deleteAll();
        for (Room room : list){
            table.addRoom(room);
        }
        logger.log(Level.INFO, "Specific rooms loaded");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnAddGuest = new javax.swing.JButton();
        btnEditGuest = new javax.swing.JButton();
        btnDeleteGuest = new javax.swing.JButton();
        btnSearchGuest = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblGuests = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnAddRent = new javax.swing.JButton();
        btnEditRent = new javax.swing.JButton();
        btnDeleteRent = new javax.swing.JButton();
        btnSearchRent = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblRents = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        btnChooseRoom = new javax.swing.JButton();
        btnChooseGuest = new javax.swing.JButton();
        spinnerDateSince = new javax.swing.JSpinner();
        spinnerDateUntil = new javax.swing.JSpinner();
        txtChosenRoom = new javax.swing.JTextField();
        btnResetRoom = new javax.swing.JButton();
        txtChosenGuest = new javax.swing.JTextField();
        btnResetGuest = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        addRoom = new javax.swing.JButton();
        editRoom = new javax.swing.JButton();
        deleteRoom = new javax.swing.JButton();
        serachRoom = new javax.swing.JButton();
        serviceValue = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        numberValue = new javax.swing.JSpinner();
        capacityValue = new javax.swing.JSpinner();
        priceValue = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("cz/muni/fi/pv168/hotelmanager/gui/Bundle_en_US"); // NOI18N
        btnAddGuest.setText(bundle.getString("MainWindow.btnAddGuest.text")); // NOI18N
        btnAddGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddGuestActionPerformed(evt);
            }
        });

        btnEditGuest.setText(bundle.getString("MainWindow.btnEditGuest.text")); // NOI18N
        btnEditGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditGuestActionPerformed(evt);
            }
        });

        btnDeleteGuest.setText(bundle.getString("MainWindow.btnDeleteGuest.text")); // NOI18N
        btnDeleteGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGuestActionPerformed(evt);
            }
        });

        btnSearchGuest.setText(bundle.getString("MainWindow.btnSearchGuest.text")); // NOI18N
        btnSearchGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGuestActionPerformed(evt);
            }
        });

        jLabel4.setText(bundle.getString("MainWindow.jLabel4.text")); // NOI18N

        tblGuests.setModel(new GuestsTableModel());
        tblGuests.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblGuests.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tblGuests);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEditGuest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteGuest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddGuest, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(txtName)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchGuest))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(btnAddGuest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditGuest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteGuest)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearchGuest)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab(bundle.getString("MainWindow.jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        btnAddRent.setText(bundle.getString("MainWindow.btnAddRent.text")); // NOI18N
        btnAddRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRentActionPerformed(evt);
            }
        });

        btnEditRent.setText(bundle.getString("MainWindow.btnEditRent.text")); // NOI18N

        btnDeleteRent.setText(bundle.getString("MainWindow.btnDeleteRent.text")); // NOI18N
        btnDeleteRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRentActionPerformed(evt);
            }
        });

        btnSearchRent.setText(bundle.getString("MainWindow.btnSearchRent.text")); // NOI18N
        btnSearchRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchRentActionPerformed(evt);
            }
        });

        jLabel7.setText(bundle.getString("MainWindow.jLabel7.text")); // NOI18N

        jLabel8.setText(bundle.getString("MainWindow.jLabel8.text")); // NOI18N

        jLabel9.setText(bundle.getString("MainWindow.jLabel9.text")); // NOI18N

        tblRents.setModel(new cz.muni.fi.pv168.hotelmanager.gui.RentsTableModel());
        tblRents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRents.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tblRents);

        jLabel10.setText(bundle.getString("MainWindow.jLabel10.text")); // NOI18N

        btnChooseRoom.setText(bundle.getString("MainWindow.btnChooseRoom.text")); // NOI18N
        btnChooseRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseRoomActionPerformed(evt);
            }
        });

        btnChooseGuest.setText(bundle.getString("MainWindow.btnChooseGuest.text")); // NOI18N
        btnChooseGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseGuestActionPerformed(evt);
            }
        });

        spinnerDateSince.setModel(new javax.swing.SpinnerDateModel());
        spinnerDateSince.setEditor(new javax.swing.JSpinner.DateEditor(spinnerDateSince, "yyyy-MM-dd"));

        spinnerDateUntil.setModel(new javax.swing.SpinnerDateModel());
        spinnerDateUntil.setEditor(new javax.swing.JSpinner.DateEditor(spinnerDateUntil, "yyyy-MM-dd"));

        txtChosenRoom.setEditable(false);

        btnResetRoom.setText(bundle.getString("MainWindow.btnResetRoom.text")); // NOI18N
        btnResetRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetRoomActionPerformed(evt);
            }
        });

        txtChosenGuest.setEditable(false);

        btnResetGuest.setText(bundle.getString("MainWindow.btnResetGuest.text")); // NOI18N
        btnResetGuest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetGuestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtChosenRoom, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtChosenGuest, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(btnChooseRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnResetRoom))
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel7)
                                .addComponent(jLabel10)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spinnerDateSince)
                                .addComponent(spinnerDateUntil))
                            .addComponent(btnSearchRent)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(btnChooseGuest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnResetGuest)))
                        .addComponent(btnEditRent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddRent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteRent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(btnAddRent, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditRent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteRent)
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerDateSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerDateUntil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtChosenRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChooseRoom)
                    .addComponent(btnResetRoom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtChosenGuest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChooseGuest)
                    .addComponent(btnResetGuest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearchRent))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane2.addTab(bundle.getString("MainWindow.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        addRoom.setText(bundle.getString("MainWindow.addRoom.text")); // NOI18N
        addRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomActionPerformed(evt);
            }
        });

        editRoom.setText(bundle.getString("MainWindow.editRoom.text")); // NOI18N
        editRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoomActionPerformed(evt);
            }
        });

        deleteRoom.setText(bundle.getString("MainWindow.deleteRoom.text")); // NOI18N
        deleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomActionPerformed(evt);
            }
        });

        serachRoom.setText(bundle.getString("MainWindow.serachRoom.text")); // NOI18N
        serachRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serachRoomActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("MainWindow.jLabel1.text")); // NOI18N

        jLabel2.setText(bundle.getString("MainWindow.jLabel2.text")); // NOI18N

        jLabel3.setText(bundle.getString("MainWindow.jLabel3.text")); // NOI18N

        tblRooms.setModel(new RoomsTableModel());
        tblRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblRooms.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblRooms);

        numberValue.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), null, null, Long.valueOf(1L)));

        priceValue.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), Long.valueOf(0L), null, Long.valueOf(1L)));

        jLabel5.setText(bundle.getString("MainWindow.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                    .addComponent(addRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(numberValue)
                    .addComponent(capacityValue)
                    .addComponent(priceValue)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(serviceValue))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serachRoom)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(addRoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editRoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRoom)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(capacityValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(serviceValue)
                            .addComponent(jLabel5))
                        .addGap(7, 7, 7)
                        .addComponent(serachRoom)
                        .addGap(0, 102, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab(bundle.getString("MainWindow.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddGuestActionPerformed
        GuestsTableModel model = (GuestsTableModel) tblGuests.getModel();
        setGuestEditorValues(null);
        int res = JOptionPane.showConfirmDialog(null, guestEditorPanel, "Add guest", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (res == JOptionPane.OK_OPTION) {
            Guest g = getGuestFromEditor();

            class GuestAddSwingWorker extends SwingWorker<Void,Void> {
                @Override
                protected Void doInBackground() throws Exception {
                    GuestManager manager = new GuestManagerImpl(source);
                    manager.createGuest(g);
                    return null;
                }

                @Override
                protected void done() {
                    model.addGuest(g);
                    logger.log(Level.INFO, "new guest added {0}", g);
                }
            }

            GuestAddSwingWorker worker = new GuestAddSwingWorker();
            worker.execute();
        }
    }//GEN-LAST:event_btnAddGuestActionPerformed

    private void btnDeleteGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGuestActionPerformed
        int row = tblGuests.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No guest selected.");
        }
        else {
            GuestsTableModel model = (GuestsTableModel) tblGuests.getModel();
            class GuestDeleteSwingWorker extends SwingWorker<Void,Void> {
                @Override
                protected Void doInBackground() throws Exception {
                    GuestManager manager = new GuestManagerImpl(source);
                    manager.deleteGuest(model.getRow(row));
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        get();
                        model.deleteGuest(row);
                        logger.log(Level.INFO, "guest deleted {0}", row);

                    }
                    catch (InterruptedException e) {
                        // can't happen
                    }
                    catch (ExecutionException e) {
                        JOptionPane.showMessageDialog(null, "Failed to delete guest: " + e);
                        return;
                    }
                }
            }
            GuestDeleteSwingWorker worker = new GuestDeleteSwingWorker();
            worker.execute();
        }
    }//GEN-LAST:event_btnDeleteGuestActionPerformed

    private void btnEditGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditGuestActionPerformed
        int row = tblGuests.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No guest selected.");
        }
        else {
            GuestsTableModel model = (GuestsTableModel) tblGuests.getModel();
            Guest g = model.getRow(row);
            setGuestEditorValues(g);
            int res = JOptionPane.showConfirmDialog(null, guestEditorPanel,
                    "Edit guest", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);
            if (res == JOptionPane.OK_OPTION) {
                Guest newGuest = getGuestFromEditor();
                newGuest.setID(g.getID());

                class GuestEditSwingWorker extends SwingWorker<Void,Void> {
                    @Override
                    protected Void doInBackground() throws Exception {
                        GuestManager manager = new GuestManagerImpl(source);
                        manager.updateGuest(newGuest);
                        return null;
                    }

                    @Override
                    protected void done() {
                        model.editGuest(newGuest, row);
                        logger.log(Level.INFO, "guest edited{0} to {1}", new Object[]{row, newGuest});
                    }
                }

                GuestEditSwingWorker worker = new GuestEditSwingWorker();
                worker.execute();
            }
        }
    }//GEN-LAST:event_btnEditGuestActionPerformed

    private void btnSearchGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchGuestActionPerformed
        String name = txtName.getText();
        class GuestSearchSwingWorker extends SwingWorker<List<Guest>,Void> {
            @Override
            protected List<Guest> doInBackground() throws Exception {
                GuestManager m = new GuestManagerImpl(source);
                List<Guest> res = m.getGuestByName(name);
                return res;
            }

            @Override
            protected void done() {
                try {
                    loadGuests(get());
                    logger.log(Level.INFO, "guest search performed");
                }
                catch (ExecutionException e) {

                }
                catch (InterruptedException e) {
                    // can't happen
                }
            }
        }
        GuestSearchSwingWorker worker = new GuestSearchSwingWorker();
        worker.execute();
    }//GEN-LAST:event_btnSearchGuestActionPerformed

    private void btnAddRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRentActionPerformed
        setRentEditorValues(null);
        int res = JOptionPane.showConfirmDialog(null, rentEditorPanel,
                "Add rent", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);
        if (res == JOptionPane.OK_OPTION) {
            Rent r = getRentFromEditor();
            RentsTableModel model = (RentsTableModel) tblRents.getModel();

            class RentAddSwingWorker extends SwingWorker<Void,Void> {
                @Override
                protected Void doInBackground() throws Exception {
                    RentManager manager = new RentManagerImpl(source);
                    manager.createRent(r);
                    return null;
                }

                @Override
                protected void done() {
                    model.addRent(r);
                    logger.log(Level.INFO, "new rent added {0}", r);
                }
            }
            RentAddSwingWorker worker = new RentAddSwingWorker();
            worker.execute();
        }
    }//GEN-LAST:event_btnAddRentActionPerformed

    private void setRentEditorValues(Rent r) {
        LocalDate since, until, now = LocalDate.now();
        Guest guest = null;
        Room room = null;
        if (r == null) {
            since = now;
            until = now;
        }
        else {
            guest = r.getGuest();
            room = r.getRoom();
            since = r.getStartDate();
            if (since == null) {
                since = now;
            }
            until = r.getEndDate();
            if (until == null) {
                until = now;
            }
        }
        rentEditorPanel.setGuest(guest);
        rentEditorPanel.setRoom(room);
        rentEditorPanel.setSince(since);
        rentEditorPanel.setUntil(until);
    }

    private Rent getRentFromEditor() {
        return new Rent(rentEditorPanel.getSince(),
                        rentEditorPanel.getUntil(),
                        rentEditorPanel.getRoom(),
                        rentEditorPanel.getGuest());
    }

    private void addRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomActionPerformed
        RoomsTableModel model = (RoomsTableModel) tblRooms.getModel();
        setRoomEditorValues(null);
        int res = JOptionPane.showConfirmDialog(null, roomEditorPanel, "add_room",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (res == JOptionPane.OK_OPTION){
            Room room = getRoomFromEditor();
            class RoomAddSwingWorker extends SwingWorker<Void, Void>{
                @Override
                protected Void doInBackground() throws Exception {
                    RoomManager manager = new RoomManagerImpl(source);
                    manager.createRoom(room);
                    return null;
                }

                @Override
                protected void done() {
                    model.addRoom(room);
                    logger.log(Level.INFO, "new room added {0}", room);
                }
            }
            RoomAddSwingWorker worker = new RoomAddSwingWorker();
            worker.execute();
        }
    }//GEN-LAST:event_addRoomActionPerformed

    private void deleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomActionPerformed
        int row = tblRooms.getSelectedRow();
        if (row < 0){
            JOptionPane.showMessageDialog(null, "No room selected.");
        }else{
            RoomsTableModel model = (RoomsTableModel) tblRooms.getModel();
            class RoomDeleteSwingWorker extends SwingWorker<Void, Void>{
                @Override
                protected Void doInBackground() throws Exception{
                    RoomManager manager = new RoomManagerImpl(source);
                    manager.deleteRoom(model.getRow(row));
                    return null;
                }

                @Override
                protected void done(){
                    try {
                        get();
                        model.deleteRoom(row);
                        logger.log(Level.INFO, "room deleted {0}", row);
                    }
                    catch (InterruptedException e) {
                        // can't happen
                    }
                    catch (ExecutionException e) {
                        JOptionPane.showMessageDialog(null, "Failed to delete room: " + e);
                        return;
                    }
                }
            }
            RoomDeleteSwingWorker worker = new RoomDeleteSwingWorker();
            worker.execute();
        }
    }//GEN-LAST:event_deleteRoomActionPerformed

    private void editRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoomActionPerformed
        int row = tblRooms.getSelectedRow();
        if (row < 0){
            JOptionPane.showMessageDialog(null, "No room selected.");
        }else{
            RoomsTableModel model = (RoomsTableModel) tblRooms.getModel();
            Room room = model.getRow(row);
            setRoomEditorValues(room);
            int res = JOptionPane.showConfirmDialog(null, roomEditorPanel, "edit room",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (res == JOptionPane.OK_OPTION){
                Room newRoom = getRoomFromEditor();
                newRoom.setID(room.getID());

                class RoomEditSwingWorker extends SwingWorker<Void, Void>{
                    @Override
                    protected Void doInBackground() throws Exception{
                        RoomManager manager = new RoomManagerImpl(source);
                        manager.updateRoom(newRoom);
                        return null;
                    }

                    @Override
                    protected void done(){
                        model.editRoom(newRoom, row);
                        logger.log(Level.INFO, "room edited{0} to {1}", new Object[]{row, newRoom});
                    }
                }
                RoomEditSwingWorker worker = new RoomEditSwingWorker();
                worker.execute();
            }
        }
    }//GEN-LAST:event_editRoomActionPerformed

    private void serachRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serachRoomActionPerformed
        Long number = (Long) numberValue.getValue();
        int capacity = (int) capacityValue.getValue();
        boolean service = serviceValue.isSelected();
        BigDecimal price = BigDecimal.valueOf((long) priceValue.getValue());

        class RoomSearchSwingWorker extends SwingWorker<List<Room>,Void> {
            @Override
            protected List<Room> doInBackground() throws Exception {
                RoomManager manager = new RoomManagerImpl(source);
                List<Room> res;
                if (!number.equals(0)){
                    res = manager.getRoomByNumber(number);
                }else if (service){
                    res = manager.getRoomByAttributesWService(capacity, price);
                }else{
                    res = manager.getRoomByAttributes(capacity, price);
                }
                return res;
            }

            @Override
            protected void done() {
                try {
                    loadRooms(get());
                    logger.log(Level.INFO, "room search performed");
                }
                catch (ExecutionException ee) {
                    JOptionPane.showMessageDialog(null, "Execution of room search thread has failed " + ee);
                    System.exit(0);
                }
                catch (InterruptedException ie) {
                    JOptionPane.showMessageDialog(null, "Room search has been interuppted " + ie);
                    System.exit(0);
                }
            }
        }
        RoomSearchSwingWorker worker = new RoomSearchSwingWorker();
        worker.execute();
    }//GEN-LAST:event_serachRoomActionPerformed

    private void btnDeleteRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRentActionPerformed
        int row = tblRents.getSelectedRow();
        if (row < 0){
            JOptionPane.showMessageDialog(null, "No rent selected.");
        }else{
            RentsTableModel model = (RentsTableModel) tblRents.getModel();
            class RentDeleteSwingWorker extends SwingWorker<Void, Void>{
                @Override
                protected Void doInBackground() throws Exception{
                    RentManager manager = new RentManagerImpl(source);
                    manager.deleteRent(model.getRow(row));
                    return null;
                }

                @Override
                protected void done(){
                    model.deleteRent(row);
                    logger.log(Level.INFO, "rent deleted {0}", row);
                }
            }
            RentDeleteSwingWorker worker = new RentDeleteSwingWorker();
            worker.execute();
        }
    }//GEN-LAST:event_btnDeleteRentActionPerformed

    private void btnChooseRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseRoomActionPerformed
        chooseRoomPanel.update();
        int res = JOptionPane.showConfirmDialog(null, chooseRoomPanel,
                "Choose room", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);
        if (res == JOptionPane.OK_OPTION) {
            this.chosenRoom = chooseRoomPanel.getRoom();
            if (this.chosenRoom != null) {
                txtChosenRoom.setText(Long.valueOf(this.chosenRoom.getNumber()).toString());
            }
        }

    }//GEN-LAST:event_btnChooseRoomActionPerformed

    private void btnChooseGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseGuestActionPerformed
        chooseGuestPanel.update();
        int res = JOptionPane.showConfirmDialog(null, chooseGuestPanel,
                "Choose guest", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);
        if (res == JOptionPane.OK_OPTION) {
            chosenGuest = chooseGuestPanel.getGuest();
            if (chosenGuest != null) {
                if (chosenGuest.getName() == null) {
                    txtChosenGuest.setText("");
                }
                else {
                    txtChosenGuest.setText(chosenGuest.getName());
                }
            }
        }
    }//GEN-LAST:event_btnChooseGuestActionPerformed

    private void btnSearchRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchRentActionPerformed
        LocalDate since = getSince();
        LocalDate until = getUntil();
        class RentSearchSwingWorker extends SwingWorker<List<Rent>,Void> {
            @Override
            protected List<Rent> doInBackground() throws Exception {
                RentManager m = new RentManagerImpl(source);
                List<Rent> res;
                if (chosenGuest == null && chosenRoom == null) {
                    res = m.getRentByDate(since, until);
                }
                else if (chosenGuest != null && chosenRoom == null) {
                    res = m.getRentByGuest(chosenGuest.getID(), since, until);
                }
                else if (chosenGuest == null && chosenRoom != null) {
                    res = m.getRentByRoom(chosenRoom.getID(), since, until);
                }
                else {
                    res = m.getRentByRoomGuest(chosenRoom.getID(), chosenGuest.getID(),
                            since, until);
                }
                return res;
            }

            @Override
            protected void done() {
                try {
                    loadRents(get());
                    logger.log(Level.INFO, "rent search performed");
                }
                catch (ExecutionException e) {
                }
                catch (InterruptedException e) {
                    // can't happen
                }
            }
        }
        RentSearchSwingWorker worker = new RentSearchSwingWorker();
        worker.execute();
    }//GEN-LAST:event_btnSearchRentActionPerformed

    private void btnResetRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetRoomActionPerformed
        chosenRoom = null;
        txtChosenRoom.setText("");
    }//GEN-LAST:event_btnResetRoomActionPerformed

    private void btnResetGuestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetGuestActionPerformed
        chosenGuest = null;
        txtChosenGuest.setText("");
    }//GEN-LAST:event_btnResetGuestActionPerformed

    private LocalDate getSince() {
        Date date = (Date) spinnerDateSince.getValue();
        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    private LocalDate getUntil() {
        Date date = (Date) spinnerDateUntil.getValue();
        return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    private Guest getGuestFromEditor() {
        return new Guest(guestEditorPanel.getNameValue(),
                         guestEditorPanel.getPhoneValue(),
                         guestEditorPanel.getAddressValue());
    }

    private Room getRoomFromEditor(){
        return new Room(roomEditorPanel.getNumberValue(),
                        roomEditorPanel.getCapacityValue(),
                        roomEditorPanel.getServiceValue(),
                        roomEditorPanel.getPriceValue());
    }

    private void setGuestEditorValues(Guest g) {
        String name, address, phone;
        if (g == null) {
            name = address = phone = "";
        }
        else {
            name = g.getName();
            address = g.getAddress();
            phone = g.getPhone();
            if (name == null) {
                name = "";
            }
            if (address == null) {
                address = "";
            }
            if (phone == null) {
                phone = "";
            }
        }
        guestEditorPanel.setNameValue(name);
        guestEditorPanel.setAddressValue(address);
        guestEditorPanel.setPhoneValue(phone);
    }

    private void setRoomEditorValues(Room room){
        Long number;
        int capacity;
        boolean service;
        BigDecimal price;
        if (room == null){
            number = 0l;
            capacity = 0;
            service = false;
            price = BigDecimal.ZERO;
        }else{
            number = room.getNumber();
            capacity = room.getCapacity();
            service = room.getService();
            price = room.getPrice();
        }
        roomEditorPanel.setNumberValue(number);
        roomEditorPanel.setCapacityValue(capacity);
        roomEditorPanel.setServiceValue(service);
        roomEditorPanel.setPriceValue(price);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */



        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        DataSource source = DatabaseCommons.getDataSource();
        if (source == null) {
            System.out.println("Failed to get data source.");
            System.exit(1);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow(source).setVisible(true);
            }
        });
    }

    private final DataSource source;

    private final RentEditorPanel rentEditorPanel;
    private final GuestEditorPanel guestEditorPanel = new GuestEditorPanel();
    private final RoomEditorPanel roomEditorPanel = new RoomEditorPanel();

    private final ChooseGuestPanel chooseGuestPanel;
    private final ChooseRoomPanel chooseRoomPanel;

    private Guest chosenGuest = null;
    private Room chosenRoom = null;

    Locale czech = new Locale("cs", "CZ");
    Locale englishUS = Locale.US;
    Locale deutsch = Locale.GERMAN;

    NumberFormat csFormat = NumberFormat.getCurrencyInstance(czech);
    NumberFormat enFormat = NumberFormat.getCurrencyInstance(czech);
    NumberFormat deFormat = NumberFormat.getCurrencyInstance(czech);

    Currency crowns = Currency.getInstance("CZ");


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoom;
    private javax.swing.JButton btnAddGuest;
    private javax.swing.JButton btnAddRent;
    private javax.swing.JButton btnChooseGuest;
    private javax.swing.JButton btnChooseRoom;
    private javax.swing.JButton btnDeleteGuest;
    private javax.swing.JButton btnDeleteRent;
    private javax.swing.JButton btnEditGuest;
    private javax.swing.JButton btnEditRent;
    private javax.swing.JButton btnResetGuest;
    private javax.swing.JButton btnResetRoom;
    private javax.swing.JButton btnSearchGuest;
    private javax.swing.JButton btnSearchRent;
    private javax.swing.JSpinner capacityValue;
    private javax.swing.JButton deleteRoom;
    private javax.swing.JButton editRoom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JSpinner numberValue;
    private javax.swing.JSpinner priceValue;
    private javax.swing.JButton serachRoom;
    private javax.swing.JCheckBox serviceValue;
    private javax.swing.JSpinner spinnerDateSince;
    private javax.swing.JSpinner spinnerDateUntil;
    private javax.swing.JTable tblGuests;
    private javax.swing.JTable tblRents;
    private javax.swing.JTable tblRooms;
    private javax.swing.JTextField txtChosenGuest;
    private javax.swing.JTextField txtChosenRoom;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
